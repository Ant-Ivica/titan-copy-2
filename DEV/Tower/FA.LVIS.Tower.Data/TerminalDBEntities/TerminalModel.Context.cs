//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace FA.LVIS.Tower.Data.TerminalDBEntities
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class Entities : DbContext
    {
        public Entities()
            : base("name=Entities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<FASTTaskMap> FASTTaskMaps { get; set; }
        public virtual DbSet<Application> Applications { get; set; }
        public virtual DbSet<AuditLog> AuditLogs { get; set; }
        public virtual DbSet<Category> Categories { get; set; }
        public virtual DbSet<Credential> Credentials { get; set; }
        public virtual DbSet<CredentialEndPoint> CredentialEndPoints { get; set; }
        public virtual DbSet<Customer> Customers { get; set; }
        public virtual DbSet<CustomerInfo> CustomerInfoes { get; set; }
        public virtual DbSet<DocumentLog> DocumentLogs { get; set; }
        public virtual DbSet<DocumentMap> DocumentMaps { get; set; }
        public virtual DbSet<DocumentMessageMap> DocumentMessageMaps { get; set; }
        public virtual DbSet<DocumentType> DocumentTypes { get; set; }
        public virtual DbSet<Exception> Exceptions { get; set; }
        public virtual DbSet<ExceptionType> ExceptionTypes { get; set; }
        public virtual DbSet<FASTGABMap> FASTGABMaps { get; set; }
        public virtual DbSet<FASTOfficeMap> FASTOfficeMaps { get; set; }
        public virtual DbSet<FASTWorkflowMap> FASTWorkflowMaps { get; set; }
        public virtual DbSet<Location> Locations { get; set; }
        public virtual DbSet<MessageLog> MessageLogs { get; set; }
        public virtual DbSet<MessageMap> MessageMaps { get; set; }
        public virtual DbSet<MessageType> MessageTypes { get; set; }
        public virtual DbSet<Provider> Providers { get; set; }
        public virtual DbSet<Service> Services { get; set; }
        public virtual DbSet<ServiceRequest> ServiceRequests { get; set; }
        public virtual DbSet<ServiceRequestInfo> ServiceRequestInfoes { get; set; }
        public virtual DbSet<Subscription> Subscriptions { get; set; }
        public virtual DbSet<Tenant> Tenants { get; set; }
        public virtual DbSet<Tower_Roles> Tower_Roles { get; set; }
        public virtual DbSet<Tower_UserClaims> Tower_UserClaims { get; set; }
        public virtual DbSet<Tower_Users> Tower_Users { get; set; }
        public virtual DbSet<TypeCode> TypeCodes { get; set; }
        public virtual DbSet<FASTOffice> FASTOffices { get; set; }
        public virtual DbSet<FASTRegion> FASTRegions { get; set; }
        public virtual DbSet<ExceptionNote> ExceptionNotes { get; set; }
        public virtual DbSet<FASTPreferenceMap> FASTPreferenceMaps { get; set; }
        public virtual DbSet<FASTProgramType> FASTProgramTypes { get; set; }
        public virtual DbSet<FASTSearchType> FASTSearchTypes { get; set; }
        public virtual DbSet<LoanCondition> LoanConditions { get; set; }
        public virtual DbSet<WinscapePipeline> WinscapePipelines { get; set; }
        public virtual DbSet<LocationCondition> LocationConditions { get; set; }
        public virtual DbSet<FASTBusinessProgramType> FASTBusinessProgramTypes { get; set; }
        public virtual DbSet<FASTFileNumber> FASTFileNumbers { get; set; }
        public virtual DbSet<Product> Products { get; set; }
        public virtual DbSet<ProductMap> ProductMaps { get; set; }
        public virtual DbSet<FASTPreferenceBusinessProgram> FASTPreferenceBusinessPrograms { get; set; }
        public virtual DbSet<FASTPreferenceProduct> FASTPreferenceProducts { get; set; }
        public virtual DbSet<ProductCondition> ProductConditions { get; set; }
        public virtual DbSet<ApplicationHeartbeat> ApplicationHeartbeats { get; set; }
        public virtual DbSet<FASTApplicationMap> FASTApplicationMaps { get; set; }
        public virtual DbSet<OfficeLocationCondition> OfficeLocationConditions { get; set; }
        public virtual DbSet<GABLocationCondition> GABLocationConditions { get; set; }
        public virtual DbSet<Contact> Contacts { get; set; }
        public virtual DbSet<FASTContactMap> FASTContactMaps { get; set; }
        public virtual DbSet<ProductProviderMap> ProductProviderMaps { get; set; }
        public virtual DbSet<LookupMap> LookupMaps { get; set; }
        public virtual DbSet<ProviderLocationCondition> ProviderLocationConditions { get; set; }
        public virtual DbSet<ServicePreferenceMap> ServicePreferenceMaps { get; set; }
        public virtual DbSet<ContactProviderMap> ContactProviderMaps { get; set; }
        public virtual DbSet<ExceptionQueueLog> ExceptionQueueLogs { get; set; }
        public virtual DbSet<CustomerRegistration> CustomerRegistrations { get; set; }
        public virtual DbSet<TitlePortLookUp> TitlePortLookUps { get; set; }
        public virtual DbSet<WebHook> WebHooks { get; set; }
        public virtual DbSet<WebhookDomain> WebhookDomains { get; set; }
    
        public virtual ObjectResult<GetFASTGABMap_Result> GetFASTGABMap(Nullable<int> loanTypeCodeId, Nullable<int> regionId, Nullable<int> locationId, string state, string county)
        {
            var loanTypeCodeIdParameter = loanTypeCodeId.HasValue ?
                new ObjectParameter("loanTypeCodeId", loanTypeCodeId) :
                new ObjectParameter("loanTypeCodeId", typeof(int));
    
            var regionIdParameter = regionId.HasValue ?
                new ObjectParameter("regionId", regionId) :
                new ObjectParameter("regionId", typeof(int));
    
            var locationIdParameter = locationId.HasValue ?
                new ObjectParameter("locationId", locationId) :
                new ObjectParameter("locationId", typeof(int));
    
            var stateParameter = state != null ?
                new ObjectParameter("state", state) :
                new ObjectParameter("state", typeof(string));
    
            var countyParameter = county != null ?
                new ObjectParameter("county", county) :
                new ObjectParameter("county", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetFASTGABMap_Result>("GetFASTGABMap", loanTypeCodeIdParameter, regionIdParameter, locationIdParameter, stateParameter, countyParameter);
        }
    
        public virtual ObjectResult<string> GetFASTFileNumber(Nullable<int> regionId)
        {
            var regionIdParameter = regionId.HasValue ?
                new ObjectParameter("regionId", regionId) :
                new ObjectParameter("regionId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("GetFASTFileNumber", regionIdParameter);
        }
    
        public virtual ObjectResult<string> GetDependancyRecordOutput(Nullable<int> id, string iNtablename)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var iNtablenameParameter = iNtablename != null ?
                new ObjectParameter("INtablename", iNtablename) :
                new ObjectParameter("INtablename", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("GetDependancyRecordOutput", idParameter, iNtablenameParameter);
        }
    
        public virtual int GetExceptionQueueLog(Nullable<int> exgroupid, Nullable<int> tenantId)
        {
            var exgroupidParameter = exgroupid.HasValue ?
                new ObjectParameter("exgroupid", exgroupid) :
                new ObjectParameter("exgroupid", typeof(int));
    
            var tenantIdParameter = tenantId.HasValue ?
                new ObjectParameter("tenantId", tenantId) :
                new ObjectParameter("tenantId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetExceptionQueueLog", exgroupidParameter, tenantIdParameter);
        }
    
        public virtual ObjectResult<GetFASTFilePreferences1_Result> GetFASTFilePreferences(string state, string county, Nullable<decimal> loanAmount, Nullable<int> serviceId, Nullable<int> locationId, Nullable<int> regionId, Nullable<int> loanPurposeTypeCodeId, Nullable<int> tenantId, Nullable<int> productId, Nullable<int> customerId)
        {
            var stateParameter = state != null ?
                new ObjectParameter("state", state) :
                new ObjectParameter("state", typeof(string));
    
            var countyParameter = county != null ?
                new ObjectParameter("county", county) :
                new ObjectParameter("county", typeof(string));
    
            var loanAmountParameter = loanAmount.HasValue ?
                new ObjectParameter("loanAmount", loanAmount) :
                new ObjectParameter("loanAmount", typeof(decimal));
    
            var serviceIdParameter = serviceId.HasValue ?
                new ObjectParameter("serviceId", serviceId) :
                new ObjectParameter("serviceId", typeof(int));
    
            var locationIdParameter = locationId.HasValue ?
                new ObjectParameter("locationId", locationId) :
                new ObjectParameter("locationId", typeof(int));
    
            var regionIdParameter = regionId.HasValue ?
                new ObjectParameter("regionId", regionId) :
                new ObjectParameter("regionId", typeof(int));
    
            var loanPurposeTypeCodeIdParameter = loanPurposeTypeCodeId.HasValue ?
                new ObjectParameter("loanPurposeTypeCodeId", loanPurposeTypeCodeId) :
                new ObjectParameter("loanPurposeTypeCodeId", typeof(int));
    
            var tenantIdParameter = tenantId.HasValue ?
                new ObjectParameter("tenantId", tenantId) :
                new ObjectParameter("tenantId", typeof(int));
    
            var productIdParameter = productId.HasValue ?
                new ObjectParameter("productId", productId) :
                new ObjectParameter("productId", typeof(int));
    
            var customerIdParameter = customerId.HasValue ?
                new ObjectParameter("customerId", customerId) :
                new ObjectParameter("customerId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetFASTFilePreferences1_Result>("GetFASTFilePreferences", stateParameter, countyParameter, loanAmountParameter, serviceIdParameter, locationIdParameter, regionIdParameter, loanPurposeTypeCodeIdParameter, tenantIdParameter, productIdParameter, customerIdParameter);
        }
    
        public virtual ObjectResult<GetExceptionInfo_Result> GetExceptionInfo(Nullable<System.DateTime> startdate, Nullable<System.DateTime> enddate, Nullable<int> exceptiongroupid, Nullable<int> tenantId, Nullable<bool> isincluderesolved, string exceptionTypeName)
        {
            var startdateParameter = startdate.HasValue ?
                new ObjectParameter("startdate", startdate) :
                new ObjectParameter("startdate", typeof(System.DateTime));
    
            var enddateParameter = enddate.HasValue ?
                new ObjectParameter("enddate", enddate) :
                new ObjectParameter("enddate", typeof(System.DateTime));
    
            var exceptiongroupidParameter = exceptiongroupid.HasValue ?
                new ObjectParameter("exceptiongroupid", exceptiongroupid) :
                new ObjectParameter("exceptiongroupid", typeof(int));
    
            var tenantIdParameter = tenantId.HasValue ?
                new ObjectParameter("tenantId", tenantId) :
                new ObjectParameter("tenantId", typeof(int));
    
            var isincluderesolvedParameter = isincluderesolved.HasValue ?
                new ObjectParameter("isincluderesolved", isincluderesolved) :
                new ObjectParameter("isincluderesolved", typeof(bool));
    
            var exceptionTypeNameParameter = exceptionTypeName != null ?
                new ObjectParameter("exceptionTypeName", exceptionTypeName) :
                new ObjectParameter("exceptionTypeName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetExceptionInfo_Result>("GetExceptionInfo", startdateParameter, enddateParameter, exceptiongroupidParameter, tenantIdParameter, isincluderesolvedParameter, exceptionTypeNameParameter);
        }
    
        public virtual ObjectResult<GetFASTOfficeMap_Result> GetFASTOfficeMap(Nullable<int> providerId, Nullable<int> locationId, string state, string county, Nullable<int> customerid, Nullable<int> contactid)
        {
            var providerIdParameter = providerId.HasValue ?
                new ObjectParameter("providerId", providerId) :
                new ObjectParameter("providerId", typeof(int));
    
            var locationIdParameter = locationId.HasValue ?
                new ObjectParameter("locationId", locationId) :
                new ObjectParameter("locationId", typeof(int));
    
            var stateParameter = state != null ?
                new ObjectParameter("state", state) :
                new ObjectParameter("state", typeof(string));
    
            var countyParameter = county != null ?
                new ObjectParameter("county", county) :
                new ObjectParameter("county", typeof(string));
    
            var customeridParameter = customerid.HasValue ?
                new ObjectParameter("customerid", customerid) :
                new ObjectParameter("customerid", typeof(int));
    
            var contactidParameter = contactid.HasValue ?
                new ObjectParameter("contactid", contactid) :
                new ObjectParameter("contactid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetFASTOfficeMap_Result>("GetFASTOfficeMap", providerIdParameter, locationIdParameter, stateParameter, countyParameter, customeridParameter, contactidParameter);
        }
    
        public virtual ObjectResult<GetProductInfo_Result> GetProductInfo(string productcode, Nullable<int> applicationId)
        {
            var productcodeParameter = productcode != null ?
                new ObjectParameter("productcode", productcode) :
                new ObjectParameter("productcode", typeof(string));
    
            var applicationIdParameter = applicationId.HasValue ?
                new ObjectParameter("applicationId", applicationId) :
                new ObjectParameter("applicationId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetProductInfo_Result>("GetProductInfo", productcodeParameter, applicationIdParameter);
        }
    
        public virtual ObjectResult<GetApplicationHeartbeat_Result> GetApplicationHeartbeat()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetApplicationHeartbeat_Result>("GetApplicationHeartbeat");
        }
    
        public virtual ObjectResult<GetFASTOfficeMapList_Result> GetFASTOfficeMapList(string contactId, Nullable<int> providerId, Nullable<int> locationId, string state, string county, Nullable<int> tenantId)
        {
            var contactIdParameter = contactId != null ?
                new ObjectParameter("contactId", contactId) :
                new ObjectParameter("contactId", typeof(string));
    
            var providerIdParameter = providerId.HasValue ?
                new ObjectParameter("providerId", providerId) :
                new ObjectParameter("providerId", typeof(int));
    
            var locationIdParameter = locationId.HasValue ?
                new ObjectParameter("locationId", locationId) :
                new ObjectParameter("locationId", typeof(int));
    
            var stateParameter = state != null ?
                new ObjectParameter("state", state) :
                new ObjectParameter("state", typeof(string));
    
            var countyParameter = county != null ?
                new ObjectParameter("county", county) :
                new ObjectParameter("county", typeof(string));
    
            var tenantIdParameter = tenantId.HasValue ?
                new ObjectParameter("tenantId", tenantId) :
                new ObjectParameter("tenantId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetFASTOfficeMapList_Result>("GetFASTOfficeMapList", contactIdParameter, providerIdParameter, locationIdParameter, stateParameter, countyParameter, tenantIdParameter);
        }
    
        public virtual ObjectResult<GetProductList_Result> GetProductList(string contactId, Nullable<int> providerId, Nullable<int> locationId, Nullable<int> tenantId, Nullable<int> applicationid)
        {
            var contactIdParameter = contactId != null ?
                new ObjectParameter("contactId", contactId) :
                new ObjectParameter("contactId", typeof(string));
    
            var providerIdParameter = providerId.HasValue ?
                new ObjectParameter("providerId", providerId) :
                new ObjectParameter("providerId", typeof(int));
    
            var locationIdParameter = locationId.HasValue ?
                new ObjectParameter("locationId", locationId) :
                new ObjectParameter("locationId", typeof(int));
    
            var tenantIdParameter = tenantId.HasValue ?
                new ObjectParameter("tenantId", tenantId) :
                new ObjectParameter("tenantId", typeof(int));
    
            var applicationidParameter = applicationid.HasValue ?
                new ObjectParameter("applicationid", applicationid) :
                new ObjectParameter("applicationid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetProductList_Result>("GetProductList", contactIdParameter, providerIdParameter, locationIdParameter, tenantIdParameter, applicationidParameter);
        }
    
        public virtual ObjectResult<GetFASTWorkflowMap_Result> GetFASTWorkflowMap(Nullable<int> customerid, Nullable<int> messagetypeid, Nullable<int> serviceId, Nullable<int> tenantId)
        {
            var customeridParameter = customerid.HasValue ?
                new ObjectParameter("customerid", customerid) :
                new ObjectParameter("customerid", typeof(int));
    
            var messagetypeidParameter = messagetypeid.HasValue ?
                new ObjectParameter("messagetypeid", messagetypeid) :
                new ObjectParameter("messagetypeid", typeof(int));
    
            var serviceIdParameter = serviceId.HasValue ?
                new ObjectParameter("serviceId", serviceId) :
                new ObjectParameter("serviceId", typeof(int));
    
            var tenantIdParameter = tenantId.HasValue ?
                new ObjectParameter("tenantId", tenantId) :
                new ObjectParameter("tenantId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetFASTWorkflowMap_Result>("GetFASTWorkflowMap", customeridParameter, messagetypeidParameter, serviceIdParameter, tenantIdParameter);
        }
    
        public virtual ObjectResult<GetProviderMap_Result> GetProviderMap(string externalId, Nullable<int> appId, string state, string county)
        {
            var externalIdParameter = externalId != null ?
                new ObjectParameter("externalId", externalId) :
                new ObjectParameter("externalId", typeof(string));
    
            var appIdParameter = appId.HasValue ?
                new ObjectParameter("appId", appId) :
                new ObjectParameter("appId", typeof(int));
    
            var stateParameter = state != null ?
                new ObjectParameter("state", state) :
                new ObjectParameter("state", typeof(string));
    
            var countyParameter = county != null ?
                new ObjectParameter("county", county) :
                new ObjectParameter("county", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetProviderMap_Result>("GetProviderMap", externalIdParameter, appIdParameter, stateParameter, countyParameter);
        }
    
        public virtual ObjectResult<GetExceptionFilterDetails_Result> GetExceptionFilterDetails(Nullable<System.DateTime> startdate, Nullable<System.DateTime> enddate, Nullable<int> exceptiongroupid, Nullable<int> tenantId, string exceptionTypeName, Nullable<int> messageTypeId, Nullable<int> typeCodeId, string exceptiondesc)
        {
            var startdateParameter = startdate.HasValue ?
                new ObjectParameter("startdate", startdate) :
                new ObjectParameter("startdate", typeof(System.DateTime));
    
            var enddateParameter = enddate.HasValue ?
                new ObjectParameter("enddate", enddate) :
                new ObjectParameter("enddate", typeof(System.DateTime));
    
            var exceptiongroupidParameter = exceptiongroupid.HasValue ?
                new ObjectParameter("exceptiongroupid", exceptiongroupid) :
                new ObjectParameter("exceptiongroupid", typeof(int));
    
            var tenantIdParameter = tenantId.HasValue ?
                new ObjectParameter("tenantId", tenantId) :
                new ObjectParameter("tenantId", typeof(int));
    
            var exceptionTypeNameParameter = exceptionTypeName != null ?
                new ObjectParameter("exceptionTypeName", exceptionTypeName) :
                new ObjectParameter("exceptionTypeName", typeof(string));
    
            var messageTypeIdParameter = messageTypeId.HasValue ?
                new ObjectParameter("messageTypeId", messageTypeId) :
                new ObjectParameter("messageTypeId", typeof(int));
    
            var typeCodeIdParameter = typeCodeId.HasValue ?
                new ObjectParameter("typeCodeId", typeCodeId) :
                new ObjectParameter("typeCodeId", typeof(int));
    
            var exceptiondescParameter = exceptiondesc != null ?
                new ObjectParameter("exceptiondesc", exceptiondesc) :
                new ObjectParameter("exceptiondesc", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetExceptionFilterDetails_Result>("GetExceptionFilterDetails", startdateParameter, enddateParameter, exceptiongroupidParameter, tenantIdParameter, exceptionTypeNameParameter, messageTypeIdParameter, typeCodeIdParameter, exceptiondescParameter);
        }
    
        public virtual ObjectResult<GetExceptionInfo_BEQ_Result> GetExceptionInfo_BEQ(Nullable<System.DateTime> startdate, Nullable<System.DateTime> enddate, Nullable<int> exceptiongroupid, Nullable<int> tenantId, Nullable<bool> isincluderesolved, string exceptionTypeName)
        {
            var startdateParameter = startdate.HasValue ?
                new ObjectParameter("startdate", startdate) :
                new ObjectParameter("startdate", typeof(System.DateTime));
    
            var enddateParameter = enddate.HasValue ?
                new ObjectParameter("enddate", enddate) :
                new ObjectParameter("enddate", typeof(System.DateTime));
    
            var exceptiongroupidParameter = exceptiongroupid.HasValue ?
                new ObjectParameter("exceptiongroupid", exceptiongroupid) :
                new ObjectParameter("exceptiongroupid", typeof(int));
    
            var tenantIdParameter = tenantId.HasValue ?
                new ObjectParameter("tenantId", tenantId) :
                new ObjectParameter("tenantId", typeof(int));
    
            var isincluderesolvedParameter = isincluderesolved.HasValue ?
                new ObjectParameter("isincluderesolved", isincluderesolved) :
                new ObjectParameter("isincluderesolved", typeof(bool));
    
            var exceptionTypeNameParameter = exceptionTypeName != null ?
                new ObjectParameter("exceptionTypeName", exceptionTypeName) :
                new ObjectParameter("exceptionTypeName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetExceptionInfo_BEQ_Result>("GetExceptionInfo_BEQ", startdateParameter, enddateParameter, exceptiongroupidParameter, tenantIdParameter, isincluderesolvedParameter, exceptionTypeNameParameter);
        }
    }
}
